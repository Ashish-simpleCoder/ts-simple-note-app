{"version":3,"file":"static/js/loginPage.6d14023b.chunk.js","mappings":"yPAYMA,GAAWC,EAAAA,EAAAA,OAAK,kBAAM,iCAGtBC,EAAQ,WACV,OAAyFC,EAAAA,EAAAA,KAAjFC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,KAAMC,EAAnC,EAAmCA,UAAWC,EAA9C,EAA8CA,UAAWC,EAAzD,EAAyDA,aAAcC,EAAvE,EAAuEA,QAASC,EAAhF,EAAgFA,MAChF,GAAoCC,EAAAA,EAAAA,GAAoB,CAACP,OAAAA,IAAlDQ,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,cAEbC,GAAcC,EAAAA,EAAAA,UAAQ,iBAAO,CAACC,UAAU,qBAAqBC,UAAU,sBAAsB,IAI7FC,GAAcC,EAAAA,EAAAA,cAAY,SAACC,GAAD,OAAmCZ,EAAa,CAACY,EAAAA,EAAGC,IADSC,kBACOT,cAAAA,MAAkB,CAACT,IAQvH,OALAmB,EAAAA,EAAAA,YAAU,WAEN,OADAC,SAASC,MAAQ,QACV,WAAOD,SAASC,MAAQ,qBAChC,KAGK,UAACpB,EAAD,CAAMqB,KAAK,QAAQC,OAAQb,EAAac,SAAUV,EAAlD,WACI,SAAC,IAAD,qBAEA,UAACZ,EAAD,YACI,SAACC,EAAD,CAAWsB,KAAK,WAChB,SAAC,IAAD,KACA,SAAC,KAAD,UAAW1B,EAAY,CAAC2B,MAAO,QAASC,KAAM,QAASC,KAAM,aAC7D,gBAAKC,UAAU,0BACf,gBAAKA,UAAU,gBAGnB,UAAC3B,EAAD,YACI,SAACC,EAAD,CAAWsB,KAAK,cAChB,SAAC,IAAD,KACA,SAAC,KAAD,UAAW1B,EAAY,CAAC2B,MAAO,WAAYC,KAAM,WAAYC,KAAM,gBACnE,gBAAKC,UAAU,6BAGnB,SAAC,IAAD,CAAIC,UAAWxB,EAAf,UACI,SAAC,IAAD,CAAcyB,KAAM,kBAAM,SAACpC,EAAD,CAAUW,MAAOA,UAE/C,SAAC,IAAD,CAAQgB,KAAK,iBAAiBd,WAAYA,EAAYwB,OAAQ3B,EAA9D,uBAIhB,WAAe4B,EAAAA,EAAAA,OAAK,kBAAM,SAAC,IAAD,WAAmB,SAACpC,EAAD","sources":["Pages/Login/Login.page.tsx"],"sourcesContent":["import {memo, useMemo, FormEvent, lazy, useEffect, useCallback } from 'react'\r\nimport Button from '../../Components/PureComponents/Button'\r\nimport H3 from '../../Components/PureComponents/H3'\r\nimport Input from '../../Components/PureComponents/Input'\r\nimport EmailSvg from '../../Svg/Email.svg'\r\nimport PasswordSvg from '../../Svg/Password.svg'\r\nimport useForm from '../../Utility/Hooks/useForm'\r\nimport useLoginValidations from '../../Utility/Hooks/useLoginValidations'\r\nimport If from '../../Utility/Utility Components/If'\r\nimport WithFetchUserHook from '../../Utility/Utility Components/WithFetchUserHook'\r\nimport WithSuspense from '../../Utility/Utility Components/WithSuspense'\r\n\r\nconst ErrorBox = lazy(() => import('../../Components/Journal Components/ErrorBox' /* webpackChunkName: 'ErrorBox' */))\r\n\r\n\r\nconst Login = () => {\r\n    const { addNewState, states, Form, FormGroup, FormLabel, handleSubmit, loading, error} = useForm()\r\n    const {isDisabled, setIsDisabled} = useLoginValidations({states})\r\n\r\n    const form_styles = useMemo(() => ({boxShadow:'var(--form-shadow)',transform:'translateY(3rem)'}), [])\r\n\r\n\r\n    const login_url = process.env.NODE_ENV == 'development' ? process.env.REACT_APP_DEV_LOGIN! : process.env.REACT_APP_PROD_LOGIN!\r\n    const handleLogin = useCallback((e: FormEvent<HTMLFormElement>) => handleSubmit({e, url: login_url, setIsDisabled }), [states])\r\n\r\n\r\n    useEffect(() => {\r\n        document.title = 'Login'\r\n        return () => {document.title = 'Simple Note App'}\r\n    }, [])\r\n\r\n    return(\r\n            <Form mode='login' styles={form_styles} onSubmit={handleLogin}>\r\n                <H3>Login</H3>\r\n\r\n                <FormGroup>\r\n                    <FormLabel text='email' />\r\n                    <EmailSvg />\r\n                    <Input {...addNewState({state: 'email', name: 'email', type: 'email'})} />\r\n                    <div className=\"utility focus-border\"></div>\r\n                    <div className=\"invalid\"></div>\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <FormLabel text='Password' />\r\n                    <PasswordSvg />\r\n                    <Input {...addNewState({state: 'password', name: 'password', type: 'password'})}/>\r\n                    <div className=\"utility focus-border\"></div>\r\n                </FormGroup>\r\n\r\n                <If condition={error}>\r\n                    <WithSuspense Comp={() => <ErrorBox error={error} />} />\r\n                </If>\r\n                <Button mode='login_form_btn' isDisabled={isDisabled} loader={loading}>Login</Button>\r\n            </Form>\r\n    )\r\n}\r\nexport default memo(() => <WithFetchUserHook><Login /></WithFetchUserHook>)"],"names":["ErrorBox","lazy","Login","useForm","addNewState","states","Form","FormGroup","FormLabel","handleSubmit","loading","error","useLoginValidations","isDisabled","setIsDisabled","form_styles","useMemo","boxShadow","transform","handleLogin","useCallback","e","url","process","useEffect","document","title","mode","styles","onSubmit","text","state","name","type","className","condition","Comp","loader","memo"],"sourceRoot":""}