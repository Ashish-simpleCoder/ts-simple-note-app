{"version":3,"file":"static/js/MiniNoteInput.2d171870.chunk.js","mappings":"oNAOMA,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,iCA6B7B,UA1BsB,WAClB,OAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAAgCC,EAAhC,KAEMC,GAAsBC,EAAAA,EAAAA,cAAY,kBAAMF,GAAiB,SAAAG,GAAC,OAAKA,OAAI,IAQzE,OALAC,EAAAA,EAAAA,YAAU,WACNC,SAASC,gBAAgBC,UAAUC,OAAO,gBAAiBT,KAC5D,CAACA,KAIA,UAACU,EAAD,CAAgBC,OAAQX,EAAxB,WACI,SAAC,IAAD,CAAIY,UAAWZ,EAAf,UACI,SAAC,IAAD,CAAca,KAAM,kBAAM,SAAChB,EAAD,UAE9B,SAAC,IAAD,CACIiB,GAAG,OACHC,QAASb,EACTc,MAAO,CAACC,gBAAiB,QAASC,aAAc,SAASC,UAAW,aAAcC,MAAO,SAH7F,SAKMpB,GAA0BqB,EAAAA,EAAAA,IAAgB,aAAcA,EAAAA,EAAAA,IAAgB,eAS1F,IAAMX,EAAiBY,EAAAA,GAAAA,QAAH,oMACd,YACE,GADY,EAAZX,OAEI,OAAOY,EAAAA,EAAAA,IAAP","sources":["Pages/Note/MiniNote.input.tsx"],"sourcesContent":["import HTMLReactParser from \"html-react-parser\"\r\nimport { lazy, useCallback, useEffect, useState } from \"react\"\r\nimport styled, { css } from \"styled-components\"\r\nimport Button from \"../../Components/PureComponents/Button\"\r\nimport If from \"../../Utility/Utility Components/If\"\r\nimport WithSuspense from \"../../Utility/Utility Components/WithSuspense\"\r\n\r\nconst NoteInput = lazy(() => import('./Note.input' /* webpackChunkName: 'NoteInput' */))\r\n\r\n\r\nconst MiniNoteInput = () => {\r\n    const [shouldOpenMiniNoteInput, setOpenMiniInput] = useState(false)\r\n\r\n    const handleOpenMiniInput = useCallback(() => setOpenMiniInput(v => !v), [])\r\n\r\n\r\n    useEffect(() => {\r\n        document.documentElement.classList.toggle('hide-overflow', shouldOpenMiniNoteInput)\r\n    }, [shouldOpenMiniNoteInput])\r\n\r\n\r\n    return(\r\n        <StyledMiniNote expand={shouldOpenMiniNoteInput}>\r\n            <If condition={shouldOpenMiniNoteInput}>\r\n                <WithSuspense Comp={() => <NoteInput />}/>\r\n            </If>\r\n            <Button\r\n                cn='open'\r\n                onClick={handleOpenMiniInput}\r\n                style={{backgroundColor: 'green', borderRadius: '0.5rem',transform: 'scale(1.5)', color: 'white'}}\r\n            >\r\n                { shouldOpenMiniNoteInput ? HTMLReactParser(\"&#10005;\") : HTMLReactParser(\"&#43;\") }\r\n            </Button>\r\n        </StyledMiniNote>\r\n    )\r\n}\r\nexport default MiniNoteInput\r\n\r\n\r\n\r\nconst StyledMiniNote = styled.section<{expand?: boolean}>`\r\n    ${({expand}) => {\r\n        if(expand){\r\n            return css`\r\n                inset: 0;\r\n                position: fixed;\r\n                z-index: 10;\r\n                background-color: var(--body-bg);\r\n                top: var(--header-height);\r\n            `\r\n        }\r\n    }}\r\n\r\n    button.open{\r\n        position: fixed;\r\n        bottom: 1rem;\r\n        right: 1rem;\r\n        z-index: 10;\r\n        background-color: var(--note-bg);\r\n    }\r\n`"],"names":["NoteInput","lazy","useState","shouldOpenMiniNoteInput","setOpenMiniInput","handleOpenMiniInput","useCallback","v","useEffect","document","documentElement","classList","toggle","StyledMiniNote","expand","condition","Comp","cn","onClick","style","backgroundColor","borderRadius","transform","color","HTMLReactParser","styled","css"],"sourceRoot":""}