{"version":3,"file":"static/js/NoteInput.fe06dd79.chunk.js","mappings":"4QAUMA,EAAY,WACd,OAAqFC,EAAAA,EAAAA,KAA9EC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,SAAUC,EAA9B,EAA8BA,YAAaC,EAA3C,EAA2CA,OAAQC,EAAnD,EAAmDA,QAASC,EAA5D,EAA4DA,UAAWC,EAAvE,EAAuEA,WACjEC,GAAWC,EAAAA,EAAAA,MACjB,GAAgDC,EAAAA,EAAAA,WAAS,GAAzD,eAAOC,EAAP,KAAyBC,EAAzB,KACA,GAAgDF,EAAAA,EAAAA,UAAS,CAACG,IAAI,GAAGC,GAAI,CAAC,IAAKC,MAAO,GAAIC,KAAM,GAAGC,QAAQ,IAAvG,eAAOC,EAAP,KAAyBC,EAAzB,KAEMC,GAAaC,EAAAA,EAAAA,UAAQ,iBAAM,UAAS,IACpCC,GAAYD,EAAAA,EAAAA,UAAQ,iBAAM,SAAQ,KAGxCE,EAAAA,EAAAA,YAAU,WACFnB,EAAOgB,IAAgBhB,EAAOkB,GAE5BnB,GAAY,GADdA,GAAY,KAEjB,CAACC,IAEJ,IAAMoB,GAAmBC,EAAAA,EAAAA,aAAW,mCAAC,WAAMrB,GAAN,2FAE7BG,GAAW,GACLmB,EAAkB,IAAIC,QAAyFC,kBAHxF,SAIXC,MAAMH,EAAiB,CAACI,OAAO,OAAQC,YAAa,UAAUf,KAAMgB,KAAKC,UAAU7B,GAAQ8B,QAAQ,CACjH,eAAgB,sBALS,cAIvBC,EAJuB,gBAOVA,EAAIC,OAPM,QAOvBC,EAPuB,QAQrBC,UACJnB,EAAoBkB,EAAKE,MACzB3B,GAAoB,IAVK,kDAa7B4B,QAAQC,IAAI,YAbiB,yBAe7BlC,GAAW,GAfkB,6EAAD,sDAiBjC,IAWH,OATAgB,EAAAA,EAAAA,YAAU,WACe,IAAD,EAAjBZ,IACCH,GAASkC,EAAAA,EAAAA,IAAWxB,IACpBZ,GAAS,eAAGc,EAAa,KAAhB,SAAqBE,EAAY,IAAjC,IACTV,GAAoB,MAEzB,CAAEM,EAAkBP,KAInB,UAAC,IAAD,CAASgC,KAAK,wBAAd,WACI,SAAC,KAAD,UAAW1C,EAAY,CAAC2C,MAAMxB,EAAYyB,KAAK,QAASC,YAAa,gBACrE,SAAC,KAAD,UAAc7C,EAAY,CAAC2C,MAAOtB,EAAWuB,KAAK,OAAQC,YAAa,qBACvE,SAAC,IAAD,CACIC,WAAY7C,EACZ8C,OAAQ3C,EACR4C,QAAS,kBAAMzB,EAAiBpB,IAChCuC,KAAK,kBAJT,kCAWZ,WAAeO,EAAAA,EAAAA,MAAKnD","sources":["Pages/Note/Note.input.tsx"],"sourcesContent":["import { memo, useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport Button from \"../../Components/PureComponents/Button\"\r\nimport Input from \"../../Components/PureComponents/Input\"\r\nimport Textarea from \"../../Components/PureComponents/Textarea\"\r\nimport Wrapper from \"../../Components/PureComponents/Wrapper\"\r\nimport { createNote } from \"../../Redux/slices/user.slice\"\r\nimport useForm from \"../../Utility/Hooks/useForm\"\r\n\r\n\r\nconst NoteInput = () => {\r\n    const {addNewState, disabled, setDisabled, states, loading, setStates, setLoading} = useForm()\r\n    const dispatch = useDispatch()\r\n    const [shouldAddNewNote, setShouldAddNewNote] = useState(false)\r\n    const [newNoteToBeAdded, setNewNoteToBeAdded] = useState({_id:'',bg: [''], title: '', body: '',delete: false})\r\n\r\n    const TitleField = useMemo(() => 'title', [])\r\n    const BodyField = useMemo(() => 'body', [])\r\n\r\n\r\n    useEffect(() => {\r\n        if(!states[TitleField] || !states[BodyField]){\r\n            setDisabled(true)\r\n        }else setDisabled(false)\r\n    }, [states])\r\n\r\n    const handleCreateNote = useCallback(async(states: Record<any, any>) => {\r\n        try{\r\n            setLoading(true)\r\n            const note_create_url = new Request(process.env.NODE_ENV == 'development' ? process.env.REACT_APP_DEV_NOTE_CREATE! : process.env.REACT_APP_PROD_NOTE_CREATE! )\r\n            const res = await fetch(note_create_url, {method:'post', credentials: 'include',body: JSON.stringify(states),headers:{\r\n                'Content-Type': 'application/json'\r\n            }})\r\n            const data = await res.json()\r\n            if(data.success){\r\n                setNewNoteToBeAdded(data.note)\r\n                setShouldAddNewNote(true)\r\n            }\r\n        }catch(err){\r\n            console.log('err' + err)\r\n        }finally{\r\n            setLoading(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(shouldAddNewNote){\r\n            dispatch(createNote(newNoteToBeAdded))\r\n            setStates({[TitleField]: '', [BodyField]: ''})\r\n            setShouldAddNewNote(false)\r\n        }\r\n    }, [ newNoteToBeAdded, shouldAddNewNote])\r\n\r\n\r\n    return(\r\n        <Wrapper mode='create_note_container'>\r\n            <Input {...addNewState({state:TitleField, name:'title', placeholder: 'title...' })} />\r\n            <Textarea {...addNewState({state: BodyField, name:'body', placeholder: 'your notes...' })} />\r\n            <Button\r\n                isDisabled={disabled}\r\n                loader={loading}\r\n                onClick={() => handleCreateNote(states)}\r\n                mode='create_note_btn'\r\n            >\r\n                Create new note.\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default memo(NoteInput)"],"names":["NoteInput","useForm","addNewState","disabled","setDisabled","states","loading","setStates","setLoading","dispatch","useDispatch","useState","shouldAddNewNote","setShouldAddNewNote","_id","bg","title","body","delete","newNoteToBeAdded","setNewNoteToBeAdded","TitleField","useMemo","BodyField","useEffect","handleCreateNote","useCallback","note_create_url","Request","process","fetch","method","credentials","JSON","stringify","headers","res","json","data","success","note","console","log","createNote","mode","state","name","placeholder","isDisabled","loader","onClick","memo"],"sourceRoot":""}